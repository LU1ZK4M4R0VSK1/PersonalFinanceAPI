 ### 1. üìù Desenvolvimento de software visual


   * Nome do Projeto: Sistema de Controle de Finan√ßas Pessoais
  O sistema de Controle de Finan√ßas Pessoais foi desenvolvido para resolver o problema da falta de
  visibilidade e organiza√ß√£o das finan√ßas di√°rias. Ele permite que os usu√°rios registrem e gerenciem suas
  receitas e despesas de forma simples e centralizada.


   * P√∫blico-alvo: Usu√°rios que desejam ter um controle claro sobre suas movimenta√ß√µes financeiras,
     categorizar seus gastos e receitas, e acompanhar o saldo consolidado de suas contas.
  ---

  ### 3. üèóÔ∏è ARQUITETURA DO PROJETO

  A estrutura do projeto foi organizada para separar as responsabilidades, facilitando a manuten√ß√£o e
  escalabilidade.


  `
  PersonalFinanceApi/
  ‚îú‚îÄ‚îÄ Models/                 # Cont√©m as classes que representam as tabelas do banco de dados (User,
  Category, Transaction).
  ‚îú‚îÄ‚îÄ Data/                   # Cont√©m o AppDbContext, respons√°vel pela comunica√ß√£o com o banco de dados via
   Entity Framework Core.
  ‚îú‚îÄ‚îÄ DTOs/                   # (Data Transfer Objects) Objetos para modelar os dados que entram e saem da
  API.
  ‚îú‚îÄ‚îÄ Endpoints/              # Define os endpoints da API usando o padr√£o de Minimal APIs.
  ‚îú‚îÄ‚îÄ Properties/             # Cont√©m configura√ß√µes de execu√ß√£o do projeto, como o launchSettings.json.
  ‚îú‚îÄ‚îÄ Migrations/             # Arquivos gerados pelo EF Core para versionar o schema do banco de dados.
  ‚îú‚îÄ‚îÄ appsettings.json        # Arquivo de configura√ß√£o da aplica√ß√£o.
  ‚îú‚îÄ‚îÄ Program.cs              # Ponto de entrada da aplica√ß√£o, onde os servi√ßos s√£o configurados e o
  pipeline de requisi√ß√µes √© montado.
  ‚îî‚îÄ‚îÄ PersonalFinanceApi.csproj # Arquivo de projeto do .NET, que define as depend√™ncias e configura√ß√µes de
  build.
  `

  ---

  ### 4. üìä EXPLICA√á√ÉO DAS ENTIDADES (MODELS)


  User.cs
  Category.cs
  Transaction.cs
  ---

  ### 5. üîó EXPLICA√á√ÉO DOS ENDPOINTS DA API


  Category Endpoints
  `json
      [
        { "id": 1, "name": "Food", "type": 1 },
        { "id": 8, "name": "Salary", "type": 0 }
      ]
      `


  Transaction Endpoints (CRUD)
   * URL e M√©todo: GET /transactions/user/{userId}
   * URL e M√©todo: GET /transactions/{id}
   * URL e M√©todo: PUT /transactions/{id}
   * URL e M√©todo: DELETE /transactions/{id}
  Dashboard Endpoints
  `json
      {
        "totalIncome": 5000.00,
        "totalExpenses": 1500.50,
        "balance": 3499.50
      }
      `

  ---

  ### 6. üóÉÔ∏è CONFIGURA√á√ÉO DO BANCO DE DADOS


   * SQLite: Foi escolhido por ser um banco de dados leve, baseado em arquivo √∫nico (personalfinance.db) e que
      n√£o exige um servidor dedicado. √â ideal para desenvolvimento, prototipagem e aplica√ß√µes de pequeno a
     m√©dio porte. A configura√ß√£o da conex√£o est√° no appsettings.json.
  7. üöÄ COMO EXECUTAR O PROJETO
   1. Restaurar as depend√™ncias do .NET:
  `bash
      dotnet run
      `
      Ap√≥s a execu√ß√£o, a API estar√° dispon√≠vel em https://localhost:<porta> e a interface do Swagger poder√°
  ser acessada no navegador para testar os endpoints.

  ---

  ### 8. üîß FLUXO DE FUNCIONAMENTO


  O fluxo operacional do sistema √© centrado no usu√°rio e suas transa√ß√µes.


  Diagrama mental do fluxo:
  Usu√°rio ‚Üí Acessa a API ‚Üí Cria/L√™ uma Transa√ß√£o ‚Üí Transa√ß√£o √© associada a uma Categoria ‚Üí Dados s√£o
  persistidos no Banco de Dados ‚Üí Dashboard √© atualizado


  Ciclo de uma opera√ß√£o (Ex: criar transa√ß√£o):
  1.  O usu√°rio envia uma requisi√ß√£o POST /transactions com os dados da transa√ß√£o (descri√ß√£o, valor, data,
  ID da categoria e ID do usu√°rio).
  2.  A API recebe a requisi√ß√£o no TransactionEndpoints.
  3.  O sistema valida os dados recebidos.
  4.  Busca a Category correspondente para determinar se a transa√ß√£o √© Income ou Expense.
  5.  Cria uma nova inst√¢ncia do objeto Transaction e a preenche.
  6.  O AppDbContext do Entity Framework Core adiciona o novo objeto √† sess√£o.
  7.  O m√©todo SaveChangesAsync() √© chamado, e o EF Core traduz o objeto em um comando SQL INSERT,
  persistindo os dados no banco de dados SQLite.
  8.  A API retorna uma resposta 201 Created com os dados da transa√ß√£o rec√©m-criada.

  ---

  ### 9. üí° PRINCIPAIS FUNCIONALIDADES IMPLEMENTADAS


   * ‚úÖ CRUD completo de transa√ß√µes: Funcionalidades para criar, ler, atualizar e deletar transa√ß√µes.
  10. üõ†Ô∏è TECNOLOGIAS E BIBLIOTECAS
   * .NET 8: Vers√£o mais recente do framework da Microsoft, oferecendo melhorias de performance, novos
     recursos de linguagem C# e suporte de longo prazo (LTS).
  Os exemplos abaixo podem ser executados usando uma ferramenta de cliente HTTP como o Postman ou a pr√≥pria
  interface do Swagger.

  #### Exemplo 1: Criar uma transa√ß√£o de receita

  `http
  POST /transactions
  Host: https://localhost:7123
  Content-Type: application/json

  {
    "description": "Sal√°rio mensal",
    "amount": 5000.00,
    "date": "2025-09-22T10:00:00Z",
    "categoryId": 8,
    "userId": 1
  }
  `
  Nota: `userId` deve ser um usu√°rio v√°lido. Como n√£o h√° endpoint de cria√ß√£o de usu√°rio, voc√™ pode adicionar
   um manualmente ao banco de dados ou assumir que o ID `1` existe.

  #### Exemplo 2: Obter o resumo financeiro do usu√°rio

  `http
  GET /dashboard/summary/1
  Host: https://localhost:7123
  `
  Resposta esperada:
  `json
  {
      "totalIncome": 5000.00,
      "totalExpenses": 0.00,
      "balance": 5000.00
  }
  `


  ---

  ### 12. üîç VALIDA√á√ïES E TRATAMENTO DE ERROS


   * Valida√ß√µes:
   * Tratamento de Erros: